#!/bin/bash

# Script to use in CI to build the docker image and push it to the host.
# 
# Environment variables:
# $IMAGE_TAGS:  List of tags to apply to the image,
#               separated by a ':' (without spaces). Setting this
#               variable will skip asking the user to enter a tag.
# $DOCKER_USER: Username of the Docker Hub account the image should be pushed
#               to. The image won't be pushed if left blank.
# $DOCKER_PASS: Password of the Docker Hub account the image should be pushed
#               to. The image won't be pushed if left blank.

# Get the current directory
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Include global functions
. "$DIR/../src/functions"

# Header
log_info "Container build script."
echo

# Make sure the IMAGE_TAGS environment variable is set
if [ -z $IMAGE_TAGS ]; then
    # Log a message
    log_error "Environment variable 'IMAGE_TAGS' not set!"
    log_error "Stopping CI build!"
    echo
    log_info "This variable should contain the tag(s) to apply."
    log_normal "Multiple tags can be entered separated by a ':' (without spaces)."

    # Exit with a non-zero code
    exit 1
fi

# Build the image
bash "$DIR/../image/build"

# Make sure the build succeeded
rc=$?
if [[ $rc != 0 ]]; then
    log_error "Image build failed!"
    exit $rc
fi

# Make sure the proper environment variables are set
if [ -z "$DOCKER_USER" ]; then
    log_warning "Environment variable 'DOCKER_USER' not set, cancelling push."
    exit 0
elif [ -z "$DOCKER_PASS" ]; then
    log_warning "Environment variable 'DOCKER_PASS' not set, cancelling push."
    exit 0
fi

# Push the build
bash "$DIR/../image/push"

# Make sure the push succeeded
rc=$?
if [[ $rc != 0 ]]; then
    log_error "Image push failed!"
    exit $rc
fi
