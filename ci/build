#!/bin/bash

# Script to use in CI to build the docker image and push it to the host.
# 
# Environment variables:
# $IMAGE_TAGS: List of tags to apply to the image,
#              separated by a ':' (without spaces). Setting this
#              variable will skip asking the user to enter a tag.

# Get the current directory
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Log a normal message.
# $1: Message.
log_normal() {
  # Print a message in orange
  printf "\e[0;33m    $1\e[0m\n"
}

# Log a success message.
# $1: Message.
log_success() {
  # Print a message in green with a checkmark
  printf "\e[0;32m[✔] $1\e[0m\n"
}

# Log a warning message.
# $1: Message.
log_warning() {
  # Print a message in red with a cross
  printf "\e[0;31m[!] $1 $2\e[0m\n"
}

# Log an error message.
# $1: Message.
log_error() {
  # Print a message in red with a cross
  printf "\e[0;31m[✖] $1 $2\e[0m\n"
}

# Log a question message.
# $1: Message.
log_question() {
  # Print a message in orange with a question mark
  printf "\e[0;33m[?] $1\e[0m\n"
}

# Log an status message.
# $1: Message
log_status() {
  # Print an indented message in purple
  printf "\e[0;35m    $1\e[0m\n"
}

# Log an info message.
# $1: Message
log_info() {
  # Print an indented message in orange
  printf "\e[0;33m[i] $1\e[0m\n"
}

# Header
log_info "Container build script."
echo

# Make sure the IMAGE_TAGS environment variable is set
if [ -z $IMAGE_TAGS ]; then
    # Log a message
    log_error "Environment variable 'IMAGE_TAGS' not set!"
    log_error "Stopping CI build!"
    echo
    log_info "This variable should contain the tag(s) to apply."
    log_normal "Multiple tags can be entered separated by a ':' (without spaces)."

    # Exit with a non-zero code
    exit 1
fi

# Build the image
bash "$DIR/../image/build"

# Make sure the build succeeded
rc=$?
if [[ $rc != 0 ]]; then
    log_error "Image build failed!"
    exit $rc
fi

# Make sure the proper environment variables are set
if [ -z "$DOCKER_USER" ]; then
    log_warning "Environment variable 'DOCKER_USER' not set, cancelling push."
    exit 0
elif [ -z "$DOCKER_PASS" ]; then
    log_warning "Environment variable 'DOCKER_PASS' not set, cancelling push."
    exit 0
fi

# Push the build
bash "$DIR/../image/push"

# Make sure the push succeeded
rc=$?
if [[ $rc != 0 ]]; then
    log_error "Image push failed!"
    exit $rc
fi
