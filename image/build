#!/bin/bash

# Script to build the docker image with the current Dockerfile.
# 
# Environment variables:
# $IMAGE_TAGS: [optional] List of tags to apply to the image,
#              separated by a ':' (without spaces). Setting this
#              variable will skip asking the user to enter a tag.

# Elevate permissions
[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"

# Get the current directory
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Script constants
DOCKER_IMAGE="timvisee/hhs-p7-spark-docker"
DOCKER_IMAGE_TAGGED="$DOCKER_IMAGE"

# Include global functions
. "$DIR/src/functions"

# Header
log_info "Prepaing docker image build..."

# Ask the user for a tag
if [ -z $IMAGE_TAGS ]; then
    echo
    log_question "Choose image tag(s) for this build."
    log_normal "Use multiple tags separated with a ':' (no spaces)."
    log_normal "Leave it empty to use 'latest' as default."
    read -p "Enter build tag(s): " IMAGE_TAGS
fi

# Use the default tag if nothing is entered
if [ -z "$IMAGE_TAGS" ]; then
    log_info "No tag entered, using 'latest'."
    IMAGE_TAGS="latest"
fi

# Output the tags used to build
log_status "Building with tags: $IMAGE_TAGS"

# Store the original IFS variable
ORIGINAL_IFS=$IFS;

# Get the first tag
export IFS=":"
for TAG in $IMAGE_TAGS; do
    # Skip empty tags
    if [ -z $TAG ]; then
        continue
    fi

    # Set the primary tag
    IMAGE_TAG=$TAG
    break
done

# Build the image name with the suffixed tag
DOCKER_IMAGE_TAGGED="$DOCKER_IMAGE:$IMAGE_TAG"

# Change into the Dockerfile directory
log_status "Changing into Dockerfile directory..."
cd "$DIR"

# Build the image
log_info "Building docker image with '$IMAGE_TAG' tag..."
sudo docker build -t "$DOCKER_IMAGE_TAGGED" --pull .

# Make sure the build succeeded
rc=$?
if [[ $rc != 0 ]]; then
    # Log an error message
    log_error "An error occurred while building the image!"

    # Restore the IFS variable
    export IFS=$ORIGINAL_IFS

    # Exit with the code
    exit $rc
fi

# Tag the build with the additional tags
log_normal "Adding tags..."
export IFS=":"
for TAG in $IMAGE_TAGS; do
    # Skip empty tags
    if [ -z $TAG ]; then
        continue;
    fi

    # Skip the primary tag
    if [ "$TAG" == "$IMAGE_TAG" ]; then
        log_status "Tag '$TAG' is already applied."
        continue;
    fi

    # Add the current tag
    sudo docker tag "$DOCKER_IMAGE_TAGGED" "$DOCKER_IMAGE:$TAG"
    log_success "Added '$TAG' tag to '$DOCKER_IMAGE_TAGGED' image."
done

# Restore the IFS variable
export IFS=$ORIGINAL_IFS

# Show a success message
log_success "Docker image build succesful!"
