#!/bin/bash

# File containing all functions that are globally used by all scripts in this
# project.
#
# These scripts may be included using '. <this-file-path>'

# Script constants
README_URL="https://github.com/timvisee/hhs-p7-spark-docker/blob/master/README.md"

# Log a normal message.
# $1: Message.
log_normal() {
  # Print a message in orange
  printf "\e[0;33m    $1\e[0m\n"
}

# Log a success message.
# $1: Message.
log_success() {
  # Print a message in green with a checkmark
  printf "\e[0;32m[✔] $1\e[0m\n"
}

# Log a warning message.
# $1: Message.
log_warning() {
  # Print a message in red with a cross
  printf "\e[0;31m[!] $1 $2\e[0m\n"
}

# Log an error message.
# $1: Message.
log_error() {
  # Print a message in red with a cross
  printf "\e[0;31m[✖] $1 $2\e[0m\n"
}

# Log a question message.
# $1: Message.
log_question() {
  # Print a message in orange with a question mark
  printf "\e[0;33m[?] $1\e[0m\n"
}

# Log an status message.
# $1: Message
log_status() {
  # Print an indented message in purple
  printf "\e[0;35m    $1\e[0m\n"
}

# Log an info message.
# $1: Message
log_info() {
  # Print an indented message in orange
  printf "\e[0;33m[i] $1\e[0m\n"
}

# Check whether a command exists
# $1: Command to check for
command_exists() {
    type "$1" &> /dev/null ;
}

# Get the user that executed the script.
# If the script is run as root user with the sudo command, the user that called
# sudo is returned if known, instead of the 'root' user.
get_command_user() {
    # Check whether we're running root, the user probably used sudo
    if [ $USER == "root" ]; then
        # Return the sudo user if known
        if [ -n $SUDO_USER ]; then
            echo "$SUDO_USER"
            return
        fi
    fi

    # Return the real current user
    echo "$USER"
}

# Require that the docker and docker-compose commands are installed.
# Show a warning and exit the code otherwise.
require_docker_commands() {
    # Make sure docker is installed
    if command_exists docker; then
        # Make sure docker compose is installed
        if command_exists docker-compose; then
            return

        else
            # Show an error message
            echo
            log_error "Docker hasn't been installed correctly."
            log_error "The command 'docker-compose' isn't recognized."
            log_info "Please read the README and follow the installation instructions."
        fi
    else
        # Show an error message
        echo
        log_error "Docker hasn't been installed correctly."
        log_error "The command 'docker' isn't recognized."
        log_info "Please check the README and follow the installation instructions."
    fi


    # Open the README in the browser
    if [ $(uname) == "Linux" ]; then
        # Get the command user
        CMD_USER="$(get_command_user)"

        # Open the URL in the browser with the current (non-sudo) user
        if command_exists xdg-open ; then
            log_info "Opening the README in your default browser as $CMD_USER..."
            sudo su -c "xdg-open \"$README_URL\"" "$CMD_USER"
        elif command_exists firefox ; then
            log_info "Opening the README in Firefox as $CMD_USER..."
            sudo su -c "firefox \"$README_URL\"" "$CMD_USER"
        else
            log_warning "No suitable method found to automatically open the README."
        fi

    elif [ $(uname) == "Darwin" ]; then
        log_success "Opening the README in Safari..."
        open "$README_URL"

    else
        log_warning "Unable to automatically open the README, unknown platform."
    fi

    # Exit the script
    exit
}
