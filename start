#!/bin/bash

# Script to start the container.
# This script automatically runs the installation if the container hasn't been
# properly installed yet. The container image is also downloaded automatically.
#
# Environment variables:
# $NOTEBOOK_OPEN_BROWSER: [optional] 'false' to prevent Notebook from opening
#                         in the default browser when it's started.
#                         Defaults to 'true'.

# Elevate permissions
[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"

# Get the current directory
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Script constants
PROJECT_NAME="spark"
NOTEBOOK_DIR="$DIR/notebook"
CONTAINER_HOME="/root"
NOTEBOOK_URL="http://localhost:8888/"

# Include global functions
. "$DIR/src/functions"

# Require that Docker is installed
require_docker_commands

# Header
log_info "Preparing to start container..."

# Start the installation script if the notebook directory doesn't exist
if [ ! -d "$NOTEBOOK_DIR" ]; then
    log_warning "The notebook directory isn't available, starting installation..."
    ./install
fi

# Start the docker container
log_status "Starting container using Docker..."
sudo docker-compose -f "$DIR/docker-compose.yml" -p "$PROJECT_NAME" up -d

# Get the URL of the running notebook instance
log_status "Waiting 2 seconds for Jupyter Notebook to start..."
sleep 2s
NOTEBOOK_URL="$(sudo docker exec -i -t spark_spark_1 "$CONTAINER_HOME/geturl")"

# Open Notebook in the default browser depending on the operating system
if [ "$NOTEBOOK_OPEN_BROWSER" == "false" ]; then
    log_info "Not opening Notebook in browser."
    log_normal "Environment variable 'NOTEBOOK_OPEN_BROWSER' is set to 'false'."

elif [ $(uname) == "Linux" ]; then
    # Get the command user
    CMD_USER="$(get_command_user)"

    # Open the URL in the browser with the current (non-sudo) user
    if command_exists xdg-open ; then
        log_info "Opening Notebook in your default browser as $CMD_USER..."
        sudo su -c "xdg-open \"$NOTEBOOK_URL\"" "$CMD_USER"
    elif command_exists firefox ; then
        log_info "Opening Notebook in Firefox as $CMD_USER..."
        sudo su -c "firefox \"$NOTEBOOK_URL\"" "$CMD_USER"
    else
        log_warning "No suitable method found to automatically open Notebook."
    fi

elif [ $(uname) == "Darwin" ]; then
    log_success "Opening Notebook in Safari..."
    open "$NOTEBOOK_URL"

else
    log_warning "Unable to automatically open Notebook, unknown platform."
fi

# Show the URL of the running notebook instance
echo
log_info "Notebook is running at:"
log_normal "$NOTEBOOK_URL"

# Started successfully, show a status message
echo
log_info "Use './stop' to stop the container."
log_success "Start succeeded!"
echo
