#!/bin/bash

[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"

# Get the current directory
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Change to the current directory
cd "$DIR"

# Log a normal message.
# $1: Message.
log_normal() {
  # Print a message in orange
  printf "\e[0;33m    $1\e[0m\n"
}

# Log a success message.
# $1: Message.
log_success() {
  # Print a message in green with a checkmark
  printf "\e[0;32m[✔] $1\e[0m\n"
}

# Log a warning message.
# $1: Message.
log_warning() {
  # Print a message in red with a cross
  printf "\e[0;31m[!] $1 $2\e[0m\n"
}

# Log an error message.
# $1: Message.
log_error() {
  # Print a message in red with a cross
  printf "\e[0;31m[✖] $1 $2\e[0m\n"
}

# Log a question message.
# $1: Message.
log_question() {
  # Print a message in orange with a question mark
  printf "\e[0;33m[?] $1\e[0m\n"
}

# Log an status message.
# $1: Message
log_status() {
  # Print an indented message in purple
  printf "\e[0;35m    $1\e[0m\n"
}

# Log an info message.
# $1: Message
log_info() {
  # Print an indented message in orange
  printf "\e[0;33m[i] $1\e[0m\n"
}

# Check whether a command exists
# $1: Command to check for
command_exists() {
    type "$1" &> /dev/null ;
}

# Header
log_info "Starting update..."

# Stop running containers
./stop

log_status "Fetching changes from the repository..."
git fetch

log_status "Pulling all changes..."
git pull

log_status "Forcing intallation for update..."
./install

cd -
log_info "Use the './start' command to start the updated container."
log_success "Update finished!"
echo
